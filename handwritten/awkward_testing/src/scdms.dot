digraph {
	rankdir=LR;
	node [shape=plaintext];
	subgraph cluster__scdms {
		label="Scdms";
		graph[style=dotted];

		scdms__seq [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
			<TR><TD BGCOLOR="#E0FFE0">pos</TD><TD BGCOLOR="#E0FFE0">size</TD><TD BGCOLOR="#E0FFE0">type</TD><TD BGCOLOR="#E0FFE0">id</TD></TR>
			<TR><TD PORT="scdms_hdr_pos">0</TD><TD PORT="scdms_hdr_size">4</TD><TD>ScdmsHeader</TD><TD PORT="scdms_hdr_type">scdms_hdr</TD></TR>
			<TR><TD PORT="n_triggers_pos">4</TD><TD PORT="n_triggers_size">...</TD><TD>switch (scdms_hdr.format_version)</TD><TD PORT="n_triggers_type">n_triggers</TD></TR>
			<TR><TD COLSPAN="4" PORT="n_triggers__repeat">repeat scdms_hdr.total_triggers times</TD></TR>
			<TR><TD PORT="scdms_footer_pos">...</TD><TD PORT="scdms_footer_size">4</TD><TD>Trailer</TD><TD PORT="scdms_footer_type">scdms_footer</TD></TR>
		</TABLE>>];
scdms__seq_n_triggers_switch [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<TR><TD BGCOLOR="#F0F2E4">case</TD><TD BGCOLOR="#F0F2E4">type</TD></TR>
	<TR><TD>1</TD><TD PORT="case0">VOneTrigger</TD></TR>
	<TR><TD>2</TD><TD PORT="case1">VTwoTrigger</TD></TR>
</TABLE>>];
		subgraph cluster__v_two_trigger {
			label="Scdms::VTwoTrigger";
			graph[style=dotted];

			v_two_trigger__seq [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">pos</TD><TD BGCOLOR="#E0FFE0">size</TD><TD BGCOLOR="#E0FFE0">type</TD><TD BGCOLOR="#E0FFE0">id</TD></TR>
				<TR><TD PORT="trigger_meta_pos">0</TD><TD PORT="trigger_meta_size">32</TD><TD>VTwoTrigMeta</TD><TD PORT="trigger_meta_type">trigger_meta</TD></TR>
				<TR><TD PORT="n_primitives_pos">32</TD><TD PORT="n_primitives_size">24</TD><TD>Primitive</TD><TD PORT="n_primitives_type">n_primitives</TD></TR>
				<TR><TD COLSPAN="4" PORT="n_primitives__repeat">repeat trigger_meta.num_primitives times</TD></TR>
				<TR><TD PORT="packed_pos">...</TD><TD PORT="packed_size">4</TD><TD>u4le</TD><TD PORT="packed_type">packed</TD></TR>
				<TR><TD PORT="n_detectors_pos">...</TD><TD PORT="n_detectors_size">...</TD><TD>Detector</TD><TD PORT="n_detectors_type">n_detectors</TD></TR>
				<TR><TD COLSPAN="4" PORT="n_detectors__repeat">repeat detectors_in_event times</TD></TR>
			</TABLE>>];
			v_two_trigger__inst__detectors_in_event [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">id</TD><TD BGCOLOR="#E0FFE0">value</TD></TR>
				<TR><TD>detectors_in_event</TD><TD>(packed &amp; 268435455)</TD></TR>
			</TABLE>>];
			v_two_trigger__inst__det_header [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">id</TD><TD BGCOLOR="#E0FFE0">value</TD></TR>
				<TR><TD>det_header</TD><TD>Kaitai::Struct::Stream::resolve_enum(Scdms::HEADERS, ((packed &amp; 4026531840) &gt;&gt; 28))</TD></TR>
			</TABLE>>];
		}
		subgraph cluster__channel {
			label="Scdms::Channel";
			graph[style=dotted];

			channel__seq [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">pos</TD><TD BGCOLOR="#E0FFE0">size</TD><TD BGCOLOR="#E0FFE0">type</TD><TD BGCOLOR="#E0FFE0">id</TD></TR>
				<TR><TD PORT="packed_pos">0</TD><TD PORT="packed_size">4</TD><TD>u4le</TD><TD PORT="packed_type">packed</TD></TR>
				<TR><TD PORT="n_pre_pulse_samples_pos">4</TD><TD PORT="n_pre_pulse_samples_size">4</TD><TD>u4le</TD><TD PORT="n_pre_pulse_samples_type">n_pre_pulse_samples</TD></TR>
				<TR><TD PORT="n_on_pulse_samples_pos">8</TD><TD PORT="n_on_pulse_samples_size">4</TD><TD>u4le</TD><TD PORT="n_on_pulse_samples_type">n_on_pulse_samples</TD></TR>
				<TR><TD PORT="n_post_pulse_samples_pos">12</TD><TD PORT="n_post_pulse_samples_size">4</TD><TD>u4le</TD><TD PORT="n_post_pulse_samples_type">n_post_pulse_samples</TD></TR>
				<TR><TD PORT="sample_rate_low_pos">16</TD><TD PORT="sample_rate_low_size">2</TD><TD>u2le</TD><TD PORT="sample_rate_low_type">sample_rate_low</TD></TR>
				<TR><TD PORT="sample_rate_high_pos">18</TD><TD PORT="sample_rate_high_size">2</TD><TD>u2le</TD><TD PORT="sample_rate_high_type">sample_rate_high</TD></TR>
				<TR><TD PORT="sample_pos">20</TD><TD PORT="sample_size">2</TD><TD>u2le</TD><TD PORT="sample_type">sample</TD></TR>
				<TR><TD COLSPAN="4" PORT="sample__repeat">repeat ((n_pre_pulse_samples + n_on_pulse_samples) + n_post_pulse_samples) times</TD></TR>
			</TABLE>>];
			channel__inst__ch_type [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">id</TD><TD BGCOLOR="#E0FFE0">value</TD></TR>
				<TR><TD>ch_type</TD><TD>(packed &amp; 3)</TD></TR>
			</TABLE>>];
			channel__inst__ch_num [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">id</TD><TD BGCOLOR="#E0FFE0">value</TD></TR>
				<TR><TD>ch_num</TD><TD>((packed &amp; 60) &gt;&gt; 2)</TD></TR>
			</TABLE>>];
			channel__inst__pre_trigger_offset [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">id</TD><TD BGCOLOR="#E0FFE0">value</TD></TR>
				<TR><TD>pre_trigger_offset</TD><TD>((packed &amp; 268435392) &gt;&gt; 6)</TD></TR>
			</TABLE>>];
			channel__inst__chnl_header [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">id</TD><TD BGCOLOR="#E0FFE0">value</TD></TR>
				<TR><TD>chnl_header</TD><TD>Kaitai::Struct::Stream::resolve_enum(Scdms::HEADERS, ((packed &amp; 4026531840) &gt;&gt; 28))</TD></TR>
			</TABLE>>];
		}
		subgraph cluster__v_one_trig_meta {
			label="Scdms::VOneTrigMeta";
			graph[style=dotted];

			v_one_trig_meta__seq [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">pos</TD><TD BGCOLOR="#E0FFE0">size</TD><TD BGCOLOR="#E0FFE0">type</TD><TD BGCOLOR="#E0FFE0">id</TD></TR>
				<TR><TD PORT="packed_1_pos">0</TD><TD PORT="packed_1_size">4</TD><TD>u4le</TD><TD PORT="packed_1_type">packed_1</TD></TR>
				<TR><TD PORT="trigger_id_pos">4</TD><TD PORT="trigger_id_size">4</TD><TD>u4le</TD><TD PORT="trigger_id_type">trigger_id</TD></TR>
				<TR><TD PORT="trigger_type_pos">8</TD><TD PORT="trigger_type_size">4</TD><TD>u4leâ†’TriggerTypes</TD><TD PORT="trigger_type_type">trigger_type</TD></TR>
				<TR><TD PORT="global_timestamp_low_pos">12</TD><TD PORT="global_timestamp_low_size">4</TD><TD>u4le</TD><TD PORT="global_timestamp_low_type">global_timestamp_low</TD></TR>
				<TR><TD PORT="global_timestamp_high_pos">16</TD><TD PORT="global_timestamp_high_size">4</TD><TD>u4le</TD><TD PORT="global_timestamp_high_type">global_timestamp_high</TD></TR>
				<TR><TD PORT="packed_2_pos">20</TD><TD PORT="packed_2_size">4</TD><TD>u4le</TD><TD PORT="packed_2_type">packed_2</TD></TR>
				<TR><TD PORT="length_of_entry_pos">24</TD><TD PORT="length_of_entry_size">4</TD><TD>u4le</TD><TD PORT="length_of_entry_type">length_of_entry</TD></TR>
			</TABLE>>];
			v_one_trig_meta__inst__event_size [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">id</TD><TD BGCOLOR="#E0FFE0">value</TD></TR>
				<TR><TD>event_size</TD><TD>(packed_1 &amp; 268435455)</TD></TR>
			</TABLE>>];
			v_one_trig_meta__inst__trig_header [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">id</TD><TD BGCOLOR="#E0FFE0">value</TD></TR>
				<TR><TD>trig_header</TD><TD>Kaitai::Struct::Stream::resolve_enum(Scdms::HEADERS, ((packed_1 &amp; 4026531840) &gt;&gt; 28))</TD></TR>
			</TABLE>>];
			v_one_trig_meta__inst__num_primitives [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">id</TD><TD BGCOLOR="#E0FFE0">value</TD></TR>
				<TR><TD>num_primitives</TD><TD>(packed_2 &amp; 268435455)</TD></TR>
			</TABLE>>];
			v_one_trig_meta__inst__prim_header [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">id</TD><TD BGCOLOR="#E0FFE0">value</TD></TR>
				<TR><TD>prim_header</TD><TD>Kaitai::Struct::Stream::resolve_enum(Scdms::HEADERS, ((packed_1 &amp; 4026531840) &gt;&gt; 28))</TD></TR>
			</TABLE>>];
		}
		subgraph cluster__detector {
			label="Scdms::Detector";
			graph[style=dotted];

			detector__seq [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">pos</TD><TD BGCOLOR="#E0FFE0">size</TD><TD BGCOLOR="#E0FFE0">type</TD><TD BGCOLOR="#E0FFE0">id</TD></TR>
				<TR><TD PORT="detector_meta_pos">0</TD><TD PORT="detector_meta_size">20</TD><TD>DetMeta</TD><TD PORT="detector_meta_type">detector_meta</TD></TR>
				<TR><TD PORT="n_channels_pos">20</TD><TD PORT="n_channels_size">...</TD><TD>Channel</TD><TD PORT="n_channels_type">n_channels</TD></TR>
				<TR><TD COLSPAN="4" PORT="n_channels__repeat">repeat detector_meta.num_channels_to_follow times</TD></TR>
			</TABLE>>];
		}
		subgraph cluster__scdms_header {
			label="Scdms::ScdmsHeader";
			graph[style=dotted];

			scdms_header__seq [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">pos</TD><TD BGCOLOR="#E0FFE0">size</TD><TD BGCOLOR="#E0FFE0">type</TD><TD BGCOLOR="#E0FFE0">id</TD></TR>
				<TR><TD PORT="packed_pos">0</TD><TD PORT="packed_size">4</TD><TD>u4le</TD><TD PORT="packed_type">packed</TD></TR>
			</TABLE>>];
			scdms_header__inst__overall_header [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">id</TD><TD BGCOLOR="#E0FFE0">value</TD></TR>
				<TR><TD>overall_header</TD><TD>Kaitai::Struct::Stream::resolve_enum(Scdms::HEADERS, ((packed &amp; 4026531840) &gt;&gt; 28))</TD></TR>
			</TABLE>>];
			scdms_header__inst__total_triggers [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">id</TD><TD BGCOLOR="#E0FFE0">value</TD></TR>
				<TR><TD>total_triggers</TD><TD>(packed &amp; 4095)</TD></TR>
			</TABLE>>];
			scdms_header__inst__format_version [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">id</TD><TD BGCOLOR="#E0FFE0">value</TD></TR>
				<TR><TD>format_version</TD><TD>((packed &amp; 268431360) &gt;&gt; 12)</TD></TR>
			</TABLE>>];
		}
		subgraph cluster__v_two_trig_meta {
			label="Scdms::VTwoTrigMeta";
			graph[style=dotted];

			v_two_trig_meta__seq [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">pos</TD><TD BGCOLOR="#E0FFE0">size</TD><TD BGCOLOR="#E0FFE0">type</TD><TD BGCOLOR="#E0FFE0">id</TD></TR>
				<TR><TD PORT="packed_1_pos">0</TD><TD PORT="packed_1_size">4</TD><TD>u4le</TD><TD PORT="packed_1_type">packed_1</TD></TR>
				<TR><TD PORT="trigger_id_pos">4</TD><TD PORT="trigger_id_size">4</TD><TD>u4le</TD><TD PORT="trigger_id_type">trigger_id</TD></TR>
				<TR><TD PORT="event_number_pos">8</TD><TD PORT="event_number_size">4</TD><TD>u4le</TD><TD PORT="event_number_type">event_number</TD></TR>
				<TR><TD PORT="packed_2_pos">12</TD><TD PORT="packed_2_size">4</TD><TD>u4le</TD><TD PORT="packed_2_type">packed_2</TD></TR>
				<TR><TD PORT="global_timestamp_low_pos">16</TD><TD PORT="global_timestamp_low_size">4</TD><TD>u4le</TD><TD PORT="global_timestamp_low_type">global_timestamp_low</TD></TR>
				<TR><TD PORT="global_timestamp_high_pos">20</TD><TD PORT="global_timestamp_high_size">4</TD><TD>u4le</TD><TD PORT="global_timestamp_high_type">global_timestamp_high</TD></TR>
				<TR><TD PORT="packed_3_pos">24</TD><TD PORT="packed_3_size">4</TD><TD>u4le</TD><TD PORT="packed_3_type">packed_3</TD></TR>
				<TR><TD PORT="length_of_entry_pos">28</TD><TD PORT="length_of_entry_size">4</TD><TD>u4le</TD><TD PORT="length_of_entry_type">length_of_entry</TD></TR>
			</TABLE>>];
			v_two_trig_meta__inst__prim_header [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">id</TD><TD BGCOLOR="#E0FFE0">value</TD></TR>
				<TR><TD>prim_header</TD><TD>Kaitai::Struct::Stream::resolve_enum(Scdms::HEADERS, ((packed_3 &amp; 4026531840) &gt;&gt; 28))</TD></TR>
			</TABLE>>];
			v_two_trig_meta__inst__num_primitives [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">id</TD><TD BGCOLOR="#E0FFE0">value</TD></TR>
				<TR><TD>num_primitives</TD><TD>(packed_3 &amp; 268435455)</TD></TR>
			</TABLE>>];
			v_two_trig_meta__inst__trigger_type [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">id</TD><TD BGCOLOR="#E0FFE0">value</TD></TR>
				<TR><TD>trigger_type</TD><TD>Kaitai::Struct::Stream::resolve_enum(Scdms::TRIGGER_TYPES, (packed_2 &amp; 15))</TD></TR>
			</TABLE>>];
			v_two_trig_meta__inst__readout_bitmask [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">id</TD><TD BGCOLOR="#E0FFE0">value</TD></TR>
				<TR><TD>readout_bitmask</TD><TD>((packed_2 &amp; 4294967040) &gt;&gt; 8)</TD></TR>
			</TABLE>>];
			v_two_trig_meta__inst__event_size [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">id</TD><TD BGCOLOR="#E0FFE0">value</TD></TR>
				<TR><TD>event_size</TD><TD>(packed_1 &amp; 268435455)</TD></TR>
			</TABLE>>];
			v_two_trig_meta__inst__trig_header [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">id</TD><TD BGCOLOR="#E0FFE0">value</TD></TR>
				<TR><TD>trig_header</TD><TD>Kaitai::Struct::Stream::resolve_enum(Scdms::HEADERS, ((packed_1 &amp; 4026531840) &gt;&gt; 28))</TD></TR>
			</TABLE>>];
		}
		subgraph cluster__trailer {
			label="Scdms::Trailer";
			graph[style=dotted];

			trailer__seq [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">pos</TD><TD BGCOLOR="#E0FFE0">size</TD><TD BGCOLOR="#E0FFE0">type</TD><TD BGCOLOR="#E0FFE0">id</TD></TR>
				<TR><TD PORT="packed_pos">0</TD><TD PORT="packed_size">4</TD><TD>u4le</TD><TD PORT="packed_type">packed</TD></TR>
			</TABLE>>];
			trailer__inst__n_preceeding_triggers [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">id</TD><TD BGCOLOR="#E0FFE0">value</TD></TR>
				<TR><TD>n_preceeding_triggers</TD><TD>(packed &amp; 268435455)</TD></TR>
			</TABLE>>];
			trailer__inst__trailer_header [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">id</TD><TD BGCOLOR="#E0FFE0">value</TD></TR>
				<TR><TD>trailer_header</TD><TD>Kaitai::Struct::Stream::resolve_enum(Scdms::HEADERS, ((packed &amp; 4026531840) &gt;&gt; 28))</TD></TR>
			</TABLE>>];
		}
		subgraph cluster__primitive {
			label="Scdms::Primitive";
			graph[style=dotted];

			primitive__seq [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">pos</TD><TD BGCOLOR="#E0FFE0">size</TD><TD BGCOLOR="#E0FFE0">type</TD><TD BGCOLOR="#E0FFE0">id</TD></TR>
				<TR><TD PORT="packed_1_pos">0</TD><TD PORT="packed_1_size">4</TD><TD>u4le</TD><TD PORT="packed_1_type">packed_1</TD></TR>
				<TR><TD PORT="ut_pos">4</TD><TD PORT="ut_size">4</TD><TD>u4le</TD><TD PORT="ut_type">ut</TD></TR>
				<TR><TD PORT="packed_2_pos">8</TD><TD PORT="packed_2_size">4</TD><TD>u4le</TD><TD PORT="packed_2_type">packed_2</TD></TR>
				<TR><TD PORT="rt_run_time_pos">12</TD><TD PORT="rt_run_time_size">2</TD><TD>u2le</TD><TD PORT="rt_run_time_type">rt_run_time</TD></TR>
				<TR><TD PORT="trig_time_pos">14</TD><TD PORT="trig_time_size">2</TD><TD>u2le</TD><TD PORT="trig_time_type">trig_time</TD></TR>
				<TR><TD PORT="packed_3_pos">16</TD><TD PORT="packed_3_size">4</TD><TD>u4le</TD><TD PORT="packed_3_type">packed_3</TD></TR>
				<TR><TD PORT="peak_amplitude_pos">20</TD><TD PORT="peak_amplitude_size">2</TD><TD>u2le</TD><TD PORT="peak_amplitude_type">peak_amplitude</TD></TR>
				<TR><TD PORT="trig_word_pos">22</TD><TD PORT="trig_word_size">2</TD><TD>u2le</TD><TD PORT="trig_word_type">trig_word</TD></TR>
			</TABLE>>];
			primitive__inst__rt_time_fraction [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">id</TD><TD BGCOLOR="#E0FFE0">value</TD></TR>
				<TR><TD>rt_time_fraction</TD><TD>(packed_2 &amp; 16777215)</TD></TR>
			</TABLE>>];
			primitive__inst__pileup [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">id</TD><TD BGCOLOR="#E0FFE0">value</TD></TR>
				<TR><TD>pileup</TD><TD>((packed_1 &amp; 3072) &gt;&gt; 10)</TD></TR>
			</TABLE>>];
			primitive__inst__det_id [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">id</TD><TD BGCOLOR="#E0FFE0">value</TD></TR>
				<TR><TD>det_id</TD><TD>((packed_1 &amp; 1020) &gt;&gt; 2)</TD></TR>
			</TABLE>>];
			primitive__inst__trig_time_fraction [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">id</TD><TD BGCOLOR="#E0FFE0">value</TD></TR>
				<TR><TD>trig_time_fraction</TD><TD>(packed_3 &amp; 16777215)</TD></TR>
			</TABLE>>];
			primitive__inst__mask_pairs [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">id</TD><TD BGCOLOR="#E0FFE0">value</TD></TR>
				<TR><TD>mask_pairs</TD><TD>((packed_3 &amp; 4278190080) &gt;&gt; 24)</TD></TR>
			</TABLE>>];
			primitive__inst__index [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">id</TD><TD BGCOLOR="#E0FFE0">value</TD></TR>
				<TR><TD>index</TD><TD>(packed_1 &amp; 3)</TD></TR>
			</TABLE>>];
			primitive__inst__trig_status [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">id</TD><TD BGCOLOR="#E0FFE0">value</TD></TR>
				<TR><TD>trig_status</TD><TD>((packed_1 &amp; 61440) &gt;&gt; 12)</TD></TR>
			</TABLE>>];
			primitive__inst__prim_dcrc_header [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">id</TD><TD BGCOLOR="#E0FFE0">value</TD></TR>
				<TR><TD>prim_dcrc_header</TD><TD>Kaitai::Struct::Stream::resolve_enum(Scdms::HEADERS, ((packed_1 &amp; 4026531840) &gt;&gt; 28))</TD></TR>
			</TABLE>>];
		}
		subgraph cluster__v_one_trigger {
			label="Scdms::VOneTrigger";
			graph[style=dotted];

			v_one_trigger__seq [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">pos</TD><TD BGCOLOR="#E0FFE0">size</TD><TD BGCOLOR="#E0FFE0">type</TD><TD BGCOLOR="#E0FFE0">id</TD></TR>
				<TR><TD PORT="trigger_meta_pos">0</TD><TD PORT="trigger_meta_size">28</TD><TD>VOneTrigMeta</TD><TD PORT="trigger_meta_type">trigger_meta</TD></TR>
				<TR><TD PORT="n_primitives_pos">28</TD><TD PORT="n_primitives_size">24</TD><TD>Primitive</TD><TD PORT="n_primitives_type">n_primitives</TD></TR>
				<TR><TD COLSPAN="4" PORT="n_primitives__repeat">repeat trigger_meta.num_primitives times</TD></TR>
				<TR><TD PORT="packed_pos">...</TD><TD PORT="packed_size">4</TD><TD>u4le</TD><TD PORT="packed_type">packed</TD></TR>
				<TR><TD PORT="n_detectors_pos">...</TD><TD PORT="n_detectors_size">...</TD><TD>Detector</TD><TD PORT="n_detectors_type">n_detectors</TD></TR>
				<TR><TD COLSPAN="4" PORT="n_detectors__repeat">repeat detectors_in_event times</TD></TR>
			</TABLE>>];
			v_one_trigger__inst__detectors_in_event [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">id</TD><TD BGCOLOR="#E0FFE0">value</TD></TR>
				<TR><TD>detectors_in_event</TD><TD>(packed &amp; 268435455)</TD></TR>
			</TABLE>>];
			v_one_trigger__inst__det_header [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">id</TD><TD BGCOLOR="#E0FFE0">value</TD></TR>
				<TR><TD>det_header</TD><TD>Kaitai::Struct::Stream::resolve_enum(Scdms::HEADERS, ((packed &amp; 4026531840) &gt;&gt; 28))</TD></TR>
			</TABLE>>];
		}
		subgraph cluster__det_meta {
			label="Scdms::DetMeta";
			graph[style=dotted];

			det_meta__seq [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">pos</TD><TD BGCOLOR="#E0FFE0">size</TD><TD BGCOLOR="#E0FFE0">type</TD><TD BGCOLOR="#E0FFE0">id</TD></TR>
				<TR><TD PORT="packed_1_pos">0</TD><TD PORT="packed_1_size">4</TD><TD>u4le</TD><TD PORT="packed_1_type">packed_1</TD></TR>
				<TR><TD PORT="dcrc0_version_pos">4</TD><TD PORT="dcrc0_version_size">1</TD><TD>u1</TD><TD PORT="dcrc0_version_type">dcrc0_version</TD></TR>
				<TR><TD PORT="dcrc0_serial_num_pos">5</TD><TD PORT="dcrc0_serial_num_size">1</TD><TD>u1</TD><TD PORT="dcrc0_serial_num_type">dcrc0_serial_num</TD></TR>
				<TR><TD PORT="dcrc1_version_pos">6</TD><TD PORT="dcrc1_version_size">1</TD><TD>u1</TD><TD PORT="dcrc1_version_type">dcrc1_version</TD></TR>
				<TR><TD PORT="dcrc1_serial_num_pos">7</TD><TD PORT="dcrc1_serial_num_size">1</TD><TD>u1</TD><TD PORT="dcrc1_serial_num_type">dcrc1_serial_num</TD></TR>
				<TR><TD PORT="packed_2_pos">8</TD><TD PORT="packed_2_size">4</TD><TD>u4le</TD><TD PORT="packed_2_type">packed_2</TD></TR>
				<TR><TD PORT="packed_3_pos">12</TD><TD PORT="packed_3_size">4</TD><TD>u4le</TD><TD PORT="packed_3_type">packed_3</TD></TR>
				<TR><TD PORT="packed_4_pos">16</TD><TD PORT="packed_4_size">4</TD><TD>u4le</TD><TD PORT="packed_4_type">packed_4</TD></TR>
			</TABLE>>];
			det_meta__inst__readout_header [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">id</TD><TD BGCOLOR="#E0FFE0">value</TD></TR>
				<TR><TD>readout_header</TD><TD>Kaitai::Struct::Stream::resolve_enum(Scdms::HEADERS, ((packed_2 &amp; 4026531840) &gt;&gt; 28))</TD></TR>
			</TABLE>>];
			det_meta__inst__series_time_fraction [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">id</TD><TD BGCOLOR="#E0FFE0">value</TD></TR>
				<TR><TD>series_time_fraction</TD><TD>(packed_3 &amp; 16777215)</TD></TR>
			</TABLE>>];
			det_meta__inst__num_channels_to_follow [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">id</TD><TD BGCOLOR="#E0FFE0">value</TD></TR>
				<TR><TD>num_channels_to_follow</TD><TD>(packed_4 &amp; 268435455)</TD></TR>
			</TABLE>>];
			det_meta__inst__det_id [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">id</TD><TD BGCOLOR="#E0FFE0">value</TD></TR>
				<TR><TD>det_id</TD><TD>((packed_1 &amp; 1020) &gt;&gt; 2)</TD></TR>
			</TABLE>>];
			det_meta__inst__det_type [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">id</TD><TD BGCOLOR="#E0FFE0">value</TD></TR>
				<TR><TD>det_type</TD><TD>((packed_1 &amp; 268434432) &gt;&gt; 10)</TD></TR>
			</TABLE>>];
			det_meta__inst__index [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">id</TD><TD BGCOLOR="#E0FFE0">value</TD></TR>
				<TR><TD>index</TD><TD>(packed_1 &amp; 3)</TD></TR>
			</TABLE>>];
			det_meta__inst__dcrc_header [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">id</TD><TD BGCOLOR="#E0FFE0">value</TD></TR>
				<TR><TD>dcrc_header</TD><TD>Kaitai::Struct::Stream::resolve_enum(Scdms::HEADERS, ((packed_1 &amp; 4026531840) &gt;&gt; 28))</TD></TR>
			</TABLE>>];
			det_meta__inst__channel_header [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">id</TD><TD BGCOLOR="#E0FFE0">value</TD></TR>
				<TR><TD>channel_header</TD><TD>Kaitai::Struct::Stream::resolve_enum(Scdms::HEADERS, ((packed_4 &amp; 4026531840) &gt;&gt; 28))</TD></TR>
			</TABLE>>];
			det_meta__inst__series_time [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">id</TD><TD BGCOLOR="#E0FFE0">value</TD></TR>
				<TR><TD>series_time</TD><TD>(packed_2 &amp; 65535)</TD></TR>
			</TABLE>>];
			det_meta__inst__readout_status [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">id</TD><TD BGCOLOR="#E0FFE0">value</TD></TR>
				<TR><TD>readout_status</TD><TD>((packed_2 &amp; 268369920) &gt;&gt; 16)</TD></TR>
			</TABLE>>];
		}
	}
	scdms__seq:scdms_hdr_type -> scdms_header__seq [style=bold];
	scdms__seq:n_triggers_type -> scdms__seq_n_triggers_switch [style=bold];
	scdms__seq_n_triggers_switch:case0 -> v_one_trigger__seq [style=bold];
	scdms__seq_n_triggers_switch:case1 -> v_two_trigger__seq [style=bold];
	scdms_header__inst__format_version:format_version_type -> scdms__seq:n_triggers_type [color="#404040"];
	scdms_header__inst__total_triggers:total_triggers_type -> scdms__seq:n_triggers__repeat [color="#404040"];
	scdms__seq:scdms_footer_type -> trailer__seq [style=bold];
	v_two_trigger__seq:trigger_meta_type -> v_two_trig_meta__seq [style=bold];
	v_two_trigger__seq:n_primitives_type -> primitive__seq [style=bold];
	v_two_trig_meta__inst__num_primitives:num_primitives_type -> v_two_trigger__seq:n_primitives__repeat [color="#404040"];
	v_two_trigger__seq:n_detectors_type -> detector__seq [style=bold];
	v_two_trigger__inst__detectors_in_event:detectors_in_event_type -> v_two_trigger__seq:n_detectors__repeat [color="#404040"];
	v_two_trigger__seq:packed_type -> v_two_trigger__inst__detectors_in_event [color="#404040"];
	v_two_trigger__seq:packed_type -> v_two_trigger__inst__det_header [color="#404040"];
	channel__seq:n_pre_pulse_samples_type -> channel__seq:sample__repeat [color="#404040"];
	channel__seq:n_on_pulse_samples_type -> channel__seq:sample__repeat [color="#404040"];
	channel__seq:n_post_pulse_samples_type -> channel__seq:sample__repeat [color="#404040"];
	channel__seq:packed_type -> channel__inst__ch_type [color="#404040"];
	channel__seq:packed_type -> channel__inst__ch_num [color="#404040"];
	channel__seq:packed_type -> channel__inst__pre_trigger_offset [color="#404040"];
	channel__seq:packed_type -> channel__inst__chnl_header [color="#404040"];
	v_one_trig_meta__seq:packed_1_type -> v_one_trig_meta__inst__event_size [color="#404040"];
	v_one_trig_meta__seq:packed_1_type -> v_one_trig_meta__inst__trig_header [color="#404040"];
	v_one_trig_meta__seq:packed_2_type -> v_one_trig_meta__inst__num_primitives [color="#404040"];
	v_one_trig_meta__seq:packed_1_type -> v_one_trig_meta__inst__prim_header [color="#404040"];
	detector__seq:detector_meta_type -> det_meta__seq [style=bold];
	detector__seq:n_channels_type -> channel__seq [style=bold];
	det_meta__inst__num_channels_to_follow:num_channels_to_follow_type -> detector__seq:n_channels__repeat [color="#404040"];
	scdms_header__seq:packed_type -> scdms_header__inst__overall_header [color="#404040"];
	scdms_header__seq:packed_type -> scdms_header__inst__total_triggers [color="#404040"];
	scdms_header__seq:packed_type -> scdms_header__inst__format_version [color="#404040"];
	v_two_trig_meta__seq:packed_3_type -> v_two_trig_meta__inst__prim_header [color="#404040"];
	v_two_trig_meta__seq:packed_3_type -> v_two_trig_meta__inst__num_primitives [color="#404040"];
	v_two_trig_meta__seq:packed_2_type -> v_two_trig_meta__inst__trigger_type [color="#404040"];
	v_two_trig_meta__seq:packed_2_type -> v_two_trig_meta__inst__readout_bitmask [color="#404040"];
	v_two_trig_meta__seq:packed_1_type -> v_two_trig_meta__inst__event_size [color="#404040"];
	v_two_trig_meta__seq:packed_1_type -> v_two_trig_meta__inst__trig_header [color="#404040"];
	trailer__seq:packed_type -> trailer__inst__n_preceeding_triggers [color="#404040"];
	trailer__seq:packed_type -> trailer__inst__trailer_header [color="#404040"];
	primitive__seq:packed_2_type -> primitive__inst__rt_time_fraction [color="#404040"];
	primitive__seq:packed_1_type -> primitive__inst__pileup [color="#404040"];
	primitive__seq:packed_1_type -> primitive__inst__det_id [color="#404040"];
	primitive__seq:packed_3_type -> primitive__inst__trig_time_fraction [color="#404040"];
	primitive__seq:packed_3_type -> primitive__inst__mask_pairs [color="#404040"];
	primitive__seq:packed_1_type -> primitive__inst__index [color="#404040"];
	primitive__seq:packed_1_type -> primitive__inst__trig_status [color="#404040"];
	primitive__seq:packed_1_type -> primitive__inst__prim_dcrc_header [color="#404040"];
	v_one_trigger__seq:trigger_meta_type -> v_one_trig_meta__seq [style=bold];
	v_one_trigger__seq:n_primitives_type -> primitive__seq [style=bold];
	v_one_trig_meta__inst__num_primitives:num_primitives_type -> v_one_trigger__seq:n_primitives__repeat [color="#404040"];
	v_one_trigger__seq:n_detectors_type -> detector__seq [style=bold];
	v_one_trigger__inst__detectors_in_event:detectors_in_event_type -> v_one_trigger__seq:n_detectors__repeat [color="#404040"];
	v_one_trigger__seq:packed_type -> v_one_trigger__inst__detectors_in_event [color="#404040"];
	v_one_trigger__seq:packed_type -> v_one_trigger__inst__det_header [color="#404040"];
	det_meta__seq:packed_2_type -> det_meta__inst__readout_header [color="#404040"];
	det_meta__seq:packed_3_type -> det_meta__inst__series_time_fraction [color="#404040"];
	det_meta__seq:packed_4_type -> det_meta__inst__num_channels_to_follow [color="#404040"];
	det_meta__seq:packed_1_type -> det_meta__inst__det_id [color="#404040"];
	det_meta__seq:packed_1_type -> det_meta__inst__det_type [color="#404040"];
	det_meta__seq:packed_1_type -> det_meta__inst__index [color="#404040"];
	det_meta__seq:packed_1_type -> det_meta__inst__dcrc_header [color="#404040"];
	det_meta__seq:packed_4_type -> det_meta__inst__channel_header [color="#404040"];
	det_meta__seq:packed_2_type -> det_meta__inst__series_time [color="#404040"];
	det_meta__seq:packed_2_type -> det_meta__inst__readout_status [color="#404040"];
}
